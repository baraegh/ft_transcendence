generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username     String @unique
  email        String @unique
  image        String?
  hashedRT      String?
  gameWon      Int?
  gameLost     Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  achievements String[]

  matchHistoriesUser1 Match_History[] @relation("Match_History_User1")
  matchHistoriesUser2 Match_History[] @relation("Match_History_User2")

  friendshipUser1 Friendship[] @relation("Friendship_User")
  friendshipUser2 Friendship[] @relation("Friendship_Friend")

  participants Participants[]

  channels Channel[]
  messages Messages[]

  @@map("users")
}

model Match_History {
  id      String @id @default(uuid())
  user1Id Int
  user2Id Int
  user1   User   @relation("Match_History_User1", fields: [user1Id], references: [id])
  user2   User   @relation("Match_History_User2", fields: [user2Id], references: [id])

  createdAt    DateTime @default(now())
  user1P Int
  user2P Int

  @@map("Match_History")
}

model Friendship {
  id       String @id @default(uuid())
  userID     Int
  friendID   Int
  user   User   @relation("Friendship_User", fields: [userID], references: [id])
  friend User   @relation("Friendship_Friend", fields: [friendID], references: [id])

  blocked     Boolean @default(false) 
  isRequested Boolean @default(false) 
  isFriend    Boolean @default(false) 
  requestAccepted Boolean  @default(false) 

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("friends")
}

// Participants model
model Participants {
  channelID String
  userID    Int
  channel   Channel @relation(fields: [channelID], references: [id])
  user      User    @relation(fields: [userID], references: [id])
  role      Role    @default(USER)
  blocked   Boolean @default(false)
  mut       Mut     @default(NAN)
  

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@id([channelID, userID])
  @@map("participants")
}

enum Role {
  ADMIN
  USER
}

enum Mut {
  NAN
  M15
  M45
  H8
  FOREVER
}

// Channel model
model Channel {
  id       String         @id @default(uuid())
  owner    User?          @relation(fields: [ownerId], references: [id])
  ownerId  Int?
  type     Type @default(PERSONEL)
  name     String?        @unique
  hash     String?
  image    String?
  chanelID Participants[]
  messages Messages[]

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  @@map("channels")
}

enum Type {
  PRIVATE
  PROTECTED
  PUBLIC
  PERSONEL
}

// Messages model
model Messages {
  id        String   @id @default(uuid())
  channelID String   
  userId    Int
  user    User     @relation(fields: [userId], references: [id])
  channel   Channel  @relation(fields: [channelID], references: [id])
  content   String
  timeSend  DateTime @default(now())

  @@map("msgs")
}
